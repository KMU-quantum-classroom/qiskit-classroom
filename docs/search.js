window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "qiskit_classroom", "modulename": "qiskit_classroom", "kind": "module", "doc": "<h1 id=\"qiskit-classroom\">Qiskit-Classroom</h1>\n\n<p>Qiskit-classroom is a toolkit that helps implement quantum algorithms by converting and visualizing different\nexpressions used in the Qiskit ecosystem using Qiskit-classroom-converter.\nThe following three transformations are supported.</p>\n\n<ul>\n<li><p>Quantum Circuit to Dirac notation</p></li>\n<li><p>Quantum Circuit to Matrix</p></li>\n<li><p>Matrix to Quantum Circuit</p></li>\n</ul>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<ul>\n<li><p>LaTeX distribution(or program) must be installed</p>\n\n<ul>\n<li><p>On GNU/Linux recommend TeX Live</p></li>\n<li><p>On Windows recommend MiKTeX</p></li>\n</ul></li>\n<li><p>git should be installed</p></li>\n<li><p>python must be installed (3.9 &lt;= X &lt;= 3.11)</p></li>\n<li><p>Qt6(&gt;= 6.0.x) must be installed</p>\n\n<ul>\n<li>macOS : <a href=\"https://pyside.readthedocs.io/en/latest/installing/macosx.html\">https://pyside.readthedocs.io/en/latest/installing/macosx.html</a></li>\n</ul></li>\n</ul>\n\n<h3 id=\"install-with-flatpak-gnulinux\">Install with Flatpak (GNU/Linux)</h3>\n\n<p>We're currently packaging flatpak package. please wait for a couple of days</p>\n\n<h3 id=\"install-with-pypi-windows-macos\">Install with PyPi (Windows, macOS)</h3>\n\n<pre><code>pip install qiskit-classroom\n</code></pre>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"apple-silicon\">Apple Silicon</h6>\n\n<p>ARM Processor not supported read this article</p>\n\n</div>\n\n<p>you must install latex distribution(program).</p>\n\n<h2 id=\"how-to-debug\">How to debug</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># download package</span>\ngit<span class=\"w\"> </span>https://github.com/KMU-quantum-classrooom/qiksit-classroom.git\n\n<span class=\"c1\"># install python packages</span>\n<span class=\"nb\">cd</span><span class=\"w\"> </span>qiskit-classroom\npip<span class=\"w\"> </span>install<span class=\"w\"> </span>-r<span class=\"w\"> </span>requirements.txt\n\n<span class=\"c1\"># run scripts</span>\npython<span class=\"w\"> </span>-m<span class=\"w\"> </span>main.py\n</code></pre>\n</div>\n\n<h2 id=\"acknowledgement\">Acknowledgement</h2>\n\n<ul>\n<li><p>\uad6d\ubb38 : \"\ubcf8 \uc5f0\uad6c\ub294 2022\ub144 \uacfc\ud559\uae30\uc220\uc815\ubcf4\ud1b5\uc2e0\ubd80 \ubc0f \uc815\ubcf4\ud1b5\uc2e0\uae30\ud68d\ud3c9\uac00\uc6d0\uc758 SW\uc911\uc2ec\ub300\ud559\uc0ac\uc5c5\uc758 \uc5f0\uad6c\uacb0\uacfc\ub85c \uc218\ud589\ub418\uc5c8\uc74c\"(2022-0-00964)</p></li>\n<li><p>English : \"This research was supported by the MIST(Ministry of Science, ICT), Korea, under the National Program for Excellence in SW), supervised by the IITP(Institute of Information &amp; communications Technology Planning &amp; Evaluation) in 2022\"(2022-0-00964)</p></li>\n</ul>\n\n<h2 id=\"license\">License</h2>\n\n<p>Qiskit-Classroom is licensed under the Apache License, Version 2.0</p>\n"}, {"fullname": "qiskit_classroom.QISKIT_CLASSROOM_CONVERTER_VERSION_STR", "modulename": "qiskit_classroom", "qualname": "QISKIT_CLASSROOM_CONVERTER_VERSION_STR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Qiskit: 0.44.1 Lib: 0.3.0&#x27;"}, {"fullname": "qiskit_classroom.converter_model", "modulename": "qiskit_classroom.converter_model", "kind": "module", "doc": "<p>module for ConverterModel</p>\n"}, {"fullname": "qiskit_classroom.converter_model.ConvertingRuleException", "modulename": "qiskit_classroom.converter_model", "qualname": "ConvertingRuleException", "kind": "class", "doc": "<p>Exception class for converting rule\nmatrix cannot convert to dirac notation directly</p>\n", "bases": "builtins.Exception"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel", "kind": "class", "doc": "<p>class for converter</p>\n"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.from_expression", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.from_expression", "kind": "variable", "doc": "<p>property of __from_expression</p>\n", "annotation": ": qiskit_classroom.expression_enum.QuantumExpression"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.to_expression", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.to_expression", "kind": "variable", "doc": "<p>property of __to_expression</p>\n", "annotation": ": qiskit_classroom.expression_enum.QuantumExpression"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.result_img_path", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.result_img_path", "kind": "variable", "doc": "<p>property of __result_img_path</p>\n\n<p>Returns:\n    str: result_img_path</p>\n", "annotation": ": str"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.input_data", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.input_data", "kind": "variable", "doc": "<p>property of __input_date</p>\n\n<p>Returns:\n    Input: user input data</p>\n", "annotation": ": qiskit_classroom.input_model.Input"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.expression_text", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.expression_text", "kind": "variable", "doc": "<p>property of __expression_text</p>\n\n<p>Returns:\n    str: expression text</p>\n", "annotation": ": str"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.convert_and_draw", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.convert_and_draw", "kind": "function", "doc": "<p>run worker to converting expression and visualizating expression</p>\n\n<p>Returns:\n    bool: if converting and drawing was success return true</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shows_result</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "qiskit_classroom.converter_model.ConverterModel.remove_result_img_path", "modulename": "qiskit_classroom.converter_model", "qualname": "ConverterModel.remove_result_img_path", "kind": "function", "doc": "<p>remove generated img file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter", "modulename": "qiskit_classroom.converter_presenter", "kind": "module", "doc": "<p>presenter for converter view</p>\n"}, {"fullname": "qiskit_classroom.converter_presenter.open_file", "modulename": "qiskit_classroom.converter_presenter", "qualname": "open_file", "kind": "function", "doc": "<p>open file and return contents</p>\n\n<p>Args:\n    file_path (str): file path</p>\n\n<p>Returns:\n    str: contents of file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter", "kind": "class", "doc": "<p>presenter for converter</p>\n"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.__init__", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">converter_view</span><span class=\"o\">.</span><span class=\"n\">ConverterView</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">converter_model</span><span class=\"o\">.</span><span class=\"n\">ConverterModel</span></span>)</span>"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.view", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.model", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_file_dropped", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_file_dropped", "kind": "function", "doc": "<p>handling file drag and drop event</p>\n\n<p>Args:\n    file_paths (list[str]): file paths which Signal pass</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_file_imported", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_file_imported", "kind": "function", "doc": "<p>handling file imported event</p>\n\n<p>Args:\n    file_path (str): file path whitch Signal pass</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_from_combo_changed", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_from_combo_changed", "kind": "function", "doc": "<p>update from_expression</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_to_combo_changed", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_to_combo_changed", "kind": "function", "doc": "<p>update to_expression</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_convert_button_clicked", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_convert_button_clicked", "kind": "function", "doc": "<p>convert expression and visualiazation.\nupdate result file path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "qiskit_classroom.converter_presenter.ConverterPresenter.on_view_destoryed", "modulename": "qiskit_classroom.converter_presenter", "qualname": "ConverterPresenter.on_view_destoryed", "kind": "function", "doc": "<p>remove image file on view destryed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view", "modulename": "qiskit_classroom.converter_view", "kind": "module", "doc": "<p>conveter view class</p>\n"}, {"fullname": "qiskit_classroom.converter_view.ConverterView", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView", "kind": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "PySide6.QtWidgets.QWidget"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.__init__", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.from_combo_currentTextChanged", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.from_combo_currentTextChanged", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.to_combo_currentTextChanged", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.to_combo_currentTextChanged", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.file_dropped", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.file_dropped", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.file_imported", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.file_imported", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.presenter", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.presenter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.currently_showing_input", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.currently_showing_input", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_ui", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_ui", "kind": "function", "doc": "<p>set UI</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.connect_signal", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.connect_signal", "kind": "function", "doc": "<p>connect signals to presenters slots</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.center", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.center", "kind": "function", "doc": "<p>move widget to center of screen</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.disable_from_combo_current_text_change", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.disable_from_combo_current_text_change", "kind": "function", "doc": "<p>disable event handling from_combo_currentTextChanged</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.enable_from_combo_current_text_change", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.enable_from_combo_current_text_change", "kind": "function", "doc": "<p>endable event handling from_combo_currentTextChanged</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.disable_to_combo_current_text_change", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.disable_to_combo_current_text_change", "kind": "function", "doc": "<p>disable event handling to_combo_currentTextChanged</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.enable_to_combo_current_text_change", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.enable_to_combo_current_text_change", "kind": "function", "doc": "<p>endable event handling to_combo_currentTextChanged</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.get_to_expression", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.get_to_expression", "kind": "function", "doc": "<p>return to_combo current text</p>\n\n<p>Returns:\n    str: current to_combo text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.get_from_expression", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.get_from_expression", "kind": "function", "doc": "<p>return from_combo current text</p>\n\n<p>Returns:\n    str: current from_combo text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.get_input", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.get_input", "kind": "function", "doc": "<p>return Input class</p>\n\n<p>Args:\n    expression (QuantumExpression): selection for expression</p>\n\n<p>Returns:\n    Input: user input class QuantumCircuitInput for QuantumCircuit, MatrixInput for Matrix\n    and DiracInput for Dirac noation</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expression_selection</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">Input</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.show_input_widget", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.show_input_widget", "kind": "function", "doc": "<p>show input widget</p>\n\n<p>Args:\n    expression_selection (QuantumExpression): select what want to show</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expression_selection</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_placeholder", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_placeholder", "kind": "function", "doc": "<p>set placehoder for expression_plain_text</p>\n\n<p>Args:\n    expression (QuantumExpression): QuantumExpression enum</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.clear_expression_plain_text", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.clear_expression_plain_text", "kind": "function", "doc": "<p>clear expression_plain_text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_from_combo_current_index", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_from_combo_current_index", "kind": "function", "doc": "<p>set from combo current index by \"index\"</p>\n\n<p>Args:\n    index (int): index</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_expression_plain_text_text", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_expression_plain_text_text", "kind": "function", "doc": "<p>set expression_pain_text text</p>\n\n<p>Args:\n    text (str): text</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.get_expression_plain_text_text", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.get_expression_plain_text_text", "kind": "function", "doc": "<p>return expresion_plain_text text</p>\n\n<p>Returns:\n    str: plainText</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_presenter", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_presenter", "kind": "function", "doc": "<p>set presenter</p>\n\n<p>Args:\n    presenter (ConverterPresenter): presenter for ConverterView</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">presenter</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">converter_presenter</span><span class=\"o\">.</span><span class=\"n\">ConverterPresenter</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.set_to_combo_items", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.set_to_combo_items", "kind": "function", "doc": "<p>set to_combo items</p>\n\n<p>Args:\n    items (list[str]): string items</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.get_shows_result", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.get_shows_result", "kind": "function", "doc": "<p>return show_result checked</p>\n\n<p>Returns:\n    bool: show_result</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.show_alert_message", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.show_alert_message", "kind": "function", "doc": "<p>show alert message to user</p>\n\n<p>Args:\n    message (str): message</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.on_convert_push_button_clicked", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.on_convert_push_button_clicked", "kind": "function", "doc": "<p>proxy for ConvertPresenter.on_convert_button_clicked()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.show_progress_bar", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.show_progress_bar", "kind": "function", "doc": "<p>show progress bar to user. show progress to user!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.close_progress_bar", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.close_progress_bar", "kind": "function", "doc": "<p>close progress bar dialog</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.show_confirm_dialog", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.show_confirm_dialog", "kind": "function", "doc": "<p>take confirm to conversion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.show_result_image", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.show_result_image", "kind": "function", "doc": "<p>show result image by ResultImageDialog</p>\n\n<p>Args:\n    image_path (str): image path want to show</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.converter_view.ConverterView.staticMetaObject", "modulename": "qiskit_classroom.converter_view", "qualname": "ConverterView.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;ConverterView&quot; inherits &quot;QWidget&quot;:\nMethods:\n  #34 type=Signal, signature=from_combo_currentTextChanged()\n  #35 type=Signal, signature=to_combo_currentTextChanged()\n  #36 type=Signal, signature=file_dropped(PyObject), parameters=PyObject\n  #37 type=Signal, signature=file_imported(QString), parameters=QString\n  #38 type=Slot, signature=on_convert_push_button_clicked()\n)"}, {"fullname": "qiskit_classroom.expression_enum", "modulename": "qiskit_classroom.expression_enum", "kind": "module", "doc": "<p>module for Expression enum</p>\n"}, {"fullname": "qiskit_classroom.expression_enum.QuantumExpression", "modulename": "qiskit_classroom.expression_enum", "qualname": "QuantumExpression", "kind": "class", "doc": "<p>Quantum expression enumerate</p>\n", "bases": "enum.Enum"}, {"fullname": "qiskit_classroom.expression_enum.QuantumExpression.CIRCUIT", "modulename": "qiskit_classroom.expression_enum", "qualname": "QuantumExpression.CIRCUIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QuantumExpression.CIRCUIT: (1, &#x27;QC&#x27;)&gt;"}, {"fullname": "qiskit_classroom.expression_enum.QuantumExpression.DIRAC", "modulename": "qiskit_classroom.expression_enum", "qualname": "QuantumExpression.DIRAC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QuantumExpression.DIRAC: (2, &#x27;BRA_KET&#x27;)&gt;"}, {"fullname": "qiskit_classroom.expression_enum.QuantumExpression.MATRIX", "modulename": "qiskit_classroom.expression_enum", "qualname": "QuantumExpression.MATRIX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;"}, {"fullname": "qiskit_classroom.expression_enum.QuantumExpression.NONE", "modulename": "qiskit_classroom.expression_enum", "qualname": "QuantumExpression.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QuantumExpression.NONE: -1&gt;"}, {"fullname": "qiskit_classroom.expression_enum.expressions", "modulename": "qiskit_classroom.expression_enum", "qualname": "expressions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[&#x27;CIRCUIT&#x27;, &#x27;DIRAC&#x27;, &#x27;MATRIX&#x27;, &#x27;NONE&#x27;]"}, {"fullname": "qiskit_classroom.expression_enum.Converting_method", "modulename": "qiskit_classroom.expression_enum", "qualname": "Converting_method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[qiskit_classroom.expression_enum.QuantumExpression, list[qiskit_classroom.expression_enum.QuantumExpression]]", "default_value": "{&lt;QuantumExpression.NONE: -1&gt;: [&lt;QuantumExpression.NONE: -1&gt;], &lt;QuantumExpression.CIRCUIT: (1, &#x27;QC&#x27;)&gt;: [&lt;QuantumExpression.CIRCUIT: (1, &#x27;QC&#x27;)&gt;, &lt;QuantumExpression.DIRAC: (2, &#x27;BRA_KET&#x27;)&gt;, &lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;], &lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;: [&lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;, &lt;QuantumExpression.CIRCUIT: (1, &#x27;QC&#x27;)&gt;], &lt;QuantumExpression.DIRAC: (2, &#x27;BRA_KET&#x27;)&gt;: [&lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;]}"}, {"fullname": "qiskit_classroom.input_model", "modulename": "qiskit_classroom.input_model", "kind": "module", "doc": "<p>moudle for input data classes</p>\n"}, {"fullname": "qiskit_classroom.input_model.Input", "modulename": "qiskit_classroom.input_model", "qualname": "Input", "kind": "class", "doc": "<p>contain user input value</p>\n"}, {"fullname": "qiskit_classroom.input_model.QuantumCircuitInput", "modulename": "qiskit_classroom.input_model", "qualname": "QuantumCircuitInput", "kind": "class", "doc": "<p>user input value for QuantumCircuit</p>\n", "bases": "Input"}, {"fullname": "qiskit_classroom.input_model.QuantumCircuitInput.__init__", "modulename": "qiskit_classroom.input_model", "qualname": "QuantumCircuitInput.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_model.QuantumCircuitInput.value_name", "modulename": "qiskit_classroom.input_model", "qualname": "QuantumCircuitInput.value_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.input_model.DiracInput", "modulename": "qiskit_classroom.input_model", "qualname": "DiracInput", "kind": "class", "doc": "<p>user input value for Dirac notation</p>\n", "bases": "Input"}, {"fullname": "qiskit_classroom.input_model.MatrixInput", "modulename": "qiskit_classroom.input_model", "qualname": "MatrixInput", "kind": "class", "doc": "<p>user input value for Matrix</p>\n", "bases": "Input"}, {"fullname": "qiskit_classroom.input_model.MatrixInput.__init__", "modulename": "qiskit_classroom.input_model", "qualname": "MatrixInput.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_qubits</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">do_measure</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_model.MatrixInput.value_name", "modulename": "qiskit_classroom.input_model", "qualname": "MatrixInput.value_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.input_model.MatrixInput.num_qubits", "modulename": "qiskit_classroom.input_model", "qualname": "MatrixInput.num_qubits", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.input_model.MatrixInput.do_measure", "modulename": "qiskit_classroom.input_model", "qualname": "MatrixInput.do_measure", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.input_view", "modulename": "qiskit_classroom.input_view", "kind": "module", "doc": "<p>Widget for converting informations</p>\n"}, {"fullname": "qiskit_classroom.input_view.EXPRESSION_PLACEHOLDERS", "modulename": "qiskit_classroom.input_view", "qualname": "EXPRESSION_PLACEHOLDERS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[slice(&lt;enum &#x27;QuantumExpression&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, None)]", "default_value": "{&lt;QuantumExpression.CIRCUIT: (1, &#x27;QC&#x27;)&gt;: &#x27;from qiskit import QuantumCircuit\\nquantum_circuit = QuantumCircuit(2, 2)\\nquantum_circuit.x(0)\\nquantum_circuit.cx(0, 1)\\n&#x27;, &lt;QuantumExpression.DIRAC: (2, &#x27;BRA_KET&#x27;)&gt;: &#x27;sqrt(2)*|00&gt;/2+sqrt(2)*|11&gt;/2&#x27;, &lt;QuantumExpression.MATRIX: (3, &#x27;MATRIX&#x27;)&gt;: &#x27;[[1, 0, 0, 0],\\n[0, 0, 0, 1],\\n[0, 0, 1, 0],\\n[0, 1, 0, 0]]&#x27;, &lt;QuantumExpression.NONE: -1&gt;: &#x27;&#x27;}"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText", "kind": "class", "doc": "<p>QPlainTextEdit(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None\nQPlainTextEdit(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None</p>\n", "bases": "PySide6.QtWidgets.QPlainTextEdit"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.__init__", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None\n__init__(self, text: str, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.file_dropped", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.file_dropped", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.set_ui", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.set_ui", "kind": "function", "doc": "<p>set UI</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.dragEnterEvent", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.dragEnterEvent", "kind": "function", "doc": "<p>handle drag event and accept only url</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">PySide6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QDragEnterEvent</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.dropEvent", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.dropEvent", "kind": "function", "doc": "<p>handle drop event and emit file imported event</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">PySide6</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QDropEvent</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.set_placeholder_text", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.set_placeholder_text", "kind": "function", "doc": "<p>set placeholder for expression plain text</p>\n\n<p>Args:\n    expression (QuantumExpression): selection</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expression</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.ExpressionPlainText.staticMetaObject", "modulename": "qiskit_classroom.input_view", "qualname": "ExpressionPlainText.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;ExpressionPlainText&quot; inherits &quot;QPlainTextEdit&quot;:\nMethods:\n  #68 type=Signal, signature=file_dropped(PyObject), parameters=PyObject\n)"}, {"fullname": "qiskit_classroom.input_view.InputWidget", "modulename": "qiskit_classroom.input_view", "qualname": "InputWidget", "kind": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "PySide6.QtWidgets.QWidget"}, {"fullname": "qiskit_classroom.input_view.InputWidget.set_ui", "modulename": "qiskit_classroom.input_view", "qualname": "InputWidget.set_ui", "kind": "function", "doc": "<p>show widgets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.InputWidget.get_input", "modulename": "qiskit_classroom.input_view", "qualname": "InputWidget.get_input", "kind": "function", "doc": "<p>return user input</p>\n\n<p>Returns:\n    Input: user input class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">Input</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.InputWidget.staticMetaObject", "modulename": "qiskit_classroom.input_view", "qualname": "InputWidget.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;InputWidget&quot; inherits &quot;QWidget&quot;:\n)"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget", "kind": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "InputWidget"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.__init__", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PySide6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.file_imported", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.file_imported", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.set_ui", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.set_ui", "kind": "function", "doc": "<p>set ui for QuantumCircuitInputWidget</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.on_file_load_clicked", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.on_file_load_clicked", "kind": "function", "doc": "<p>handling file dialog</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.get_input", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.get_input", "kind": "function", "doc": "<p>return user input</p>\n\n<p>Returns:\n    Input: user input class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">QuantumCircuitInput</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.QuantumCircuitInputWidget.staticMetaObject", "modulename": "qiskit_classroom.input_view", "qualname": "QuantumCircuitInputWidget.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;QuantumCircuitInputWidget&quot; inherits &quot;InputWidget&quot;:\nMethods:\n  #34 type=Signal, signature=file_imported(QString), parameters=QString\n)"}, {"fullname": "qiskit_classroom.input_view.DiracInputWidget", "modulename": "qiskit_classroom.input_view", "qualname": "DiracInputWidget", "kind": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "InputWidget"}, {"fullname": "qiskit_classroom.input_view.DiracInputWidget.__init__", "modulename": "qiskit_classroom.input_view", "qualname": "DiracInputWidget.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PySide6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_view.DiracInputWidget.get_input", "modulename": "qiskit_classroom.input_view", "qualname": "DiracInputWidget.get_input", "kind": "function", "doc": "<p>return user input</p>\n\n<p>Returns:\n    Input: user input class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">DiracInput</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.DiracInputWidget.staticMetaObject", "modulename": "qiskit_classroom.input_view", "qualname": "DiracInputWidget.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;DiracInputWidget&quot; inherits &quot;InputWidget&quot;:\n)"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget", "kind": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "InputWidget"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.__init__", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">PySide6</span><span class=\"o\">.</span><span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QWidget</span></span>)</span>"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.matrix_plain_text", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.matrix_plain_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": PySide6.QtWidgets.QPlainTextEdit"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.num_cubit_text", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.num_cubit_text", "kind": "variable", "doc": "<p></p>\n", "annotation": ": PySide6.QtWidgets.QLineEdit"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.do_measure_checkbox", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.do_measure_checkbox", "kind": "variable", "doc": "<p></p>\n", "annotation": ": PySide6.QtWidgets.QCheckBox"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.set_ui", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.set_ui", "kind": "function", "doc": "<p>show widgets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.get_input", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.get_input", "kind": "function", "doc": "<p>return user input</p>\n\n<p>Returns:\n    Input: user input class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">Input</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.input_view.MatrixInputWidget.staticMetaObject", "modulename": "qiskit_classroom.input_view", "qualname": "MatrixInputWidget.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;MatrixInputWidget&quot; inherits &quot;InputWidget&quot;:\n)"}, {"fullname": "qiskit_classroom.result_image_dialog", "modulename": "qiskit_classroom.result_image_dialog", "kind": "module", "doc": "<p>image dialog</p>\n"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog", "kind": "class", "doc": "<p>QDialog(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n", "bases": "PySide6.QtWidgets.QDialog"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.__init__", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.__init__", "kind": "function", "doc": "<p>__init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowType = Default(Qt.WindowFlags)) -> None</p>\n\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span></span>)</span>"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.image_path", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.image_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.image_label", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.image_label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.close_button", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.close_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.save_image", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.save_image", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.on_save_image_clicked", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.on_save_image_clicked", "kind": "function", "doc": "<p>copy converted image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.show_image", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.show_image", "kind": "function", "doc": "<p>show image</p>\n\n<p>Args:\n    image_path (str): image path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.hideEvent", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.hideEvent", "kind": "function", "doc": "<p>remove image</p>\n\n<p>Args:\n    event (_type_): default event argument</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.result_image_dialog.ResultImageDialog.staticMetaObject", "modulename": "qiskit_classroom.result_image_dialog", "qualname": "ResultImageDialog.staticMetaObject", "kind": "variable", "doc": "<p></p>\n", "default_value": "PySide6.QtCore.QMetaObject(&quot;ResultImageDialog&quot; inherits &quot;QDialog&quot;:\n)"}, {"fullname": "qiskit_classroom.worker", "modulename": "qiskit_classroom.worker", "kind": "module", "doc": "<p>worker for convert and visualize expressions</p>\n"}, {"fullname": "qiskit_classroom.worker.ARRAY_TO_LATEX_IMPORT", "modulename": "qiskit_classroom.worker", "qualname": "ARRAY_TO_LATEX_IMPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;from qiskit.visualization import array_to_latex&#x27;"}, {"fullname": "qiskit_classroom.worker.CONVERTER_IMPORT", "modulename": "qiskit_classroom.worker", "qualname": "CONVERTER_IMPORT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;from qiskit_class_converter import ConversionService&#x27;"}, {"fullname": "qiskit_classroom.worker.add_new_line", "modulename": "qiskit_classroom.worker", "qualname": "add_new_line", "kind": "function", "doc": "<p>add \\n between every line</p>\n\n<p>Args:\n    strings (list[str]): list of line</p>\n\n<p>Returns:\n    str: joined string with \\n</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">strings</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker", "kind": "class", "doc": "<p>worker for convert expression and visualize expression</p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.__init__", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">from_expression</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span>,</span><span class=\"param\">\t<span class=\"n\">to_expression</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">expression_enum</span><span class=\"o\">.</span><span class=\"n\">QuantumExpression</span>,</span><span class=\"param\">\t<span class=\"n\">input_data</span><span class=\"p\">:</span> <span class=\"n\">qiskit_classroom</span><span class=\"o\">.</span><span class=\"n\">input_model</span><span class=\"o\">.</span><span class=\"n\">Input</span>,</span><span class=\"param\">\t<span class=\"n\">expression_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">shows_result</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.from_expression", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.from_expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.to_expression", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.to_expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.expression_text", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.expression_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.input_data", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.input_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.shows_result", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.shows_result", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.generate_random_file_name", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.generate_random_file_name", "kind": "function", "doc": "<p>return generated file name</p>\n\n<p>Returns:\n    str: generated file name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.write_converting_code", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.write_converting_code", "kind": "function", "doc": "<p>write code to file_path</p>\n\n<p>Args:\n    file_path (str): target\n    code (str): contents</p>\n\n<p>Returns:\n    bool: is succesful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.generate_conversion_code", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.generate_conversion_code", "kind": "function", "doc": "<p>generate the conversion code according to the conversion method.</p>\n\n<p>Returns:\n    str: generated conversion code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.generate_visualization_code", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.generate_visualization_code", "kind": "function", "doc": "<p>generate visualiszation code according to the conversion method</p>\n\n<p>Returns:\n    str: visualization code</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.run", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.run", "kind": "function", "doc": "<p>inject expression convert code to user's source code and create\nsubprocess for drawing converted expresion</p>\n\n<p>Returns:\n    str: path of subprocess created image</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.run_subprocess", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.run_subprocess", "kind": "function", "doc": "<p>run generated script's subprocess</p>\n\n<p>Returns:\n    (str, str): subprocess's stdout and stderr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "async def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.cleanup", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.cleanup", "kind": "function", "doc": "<p>remove generated script</p>\n\n<p>Returns:\n    bool: result of removing file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "qiskit_classroom.worker.ConverterWorker.draw_latex", "modulename": "qiskit_classroom.worker", "qualname": "ConverterWorker.draw_latex", "kind": "function", "doc": "<p>render latex to image and save as file.</p>\n\n<p>Args:\n    latex (str): latex matrix code</p>\n\n<p>Raises:\n    MatrixNotFound: when latex not have matrix</p>\n\n<p>Returns:\n    str: image file path</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latex</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();